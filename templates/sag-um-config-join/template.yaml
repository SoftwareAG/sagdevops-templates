#########################################################################################
# Copyright (c) 2011-2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc.,
# Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
#
# SPDX-License-Identifier: Apache-2.0
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#########################################################################################

alias: sag-um-config-join
description: Template to create a channel with join. Prerequisites - have a 2 bound realms with the target realm having the target channel already present.

environments:
  default:
    um.instance.name: umserver
    src.channel.name: c1
    destination.realm.name: umserver2
    remote.realm.url: nsp://0.0.0.0:9100
    destination.channel: c2

layers: 
  runtime:
    templates:
      - createJoinTemplate

templates:
  createJoinTemplate:
    products:                              
      NUMRealmServer:  
        ${um.instance.name}:                                      
          runtimeComponentId: Universal-Messaging-${um.instance.name}
          configuration:
            Universal-Messaging-${um.instance.name}:   
              UM-CHANNELS:
                UM-CHANNELS-${src.channel.name}:
                  name: ${src.channel.name}
                  channelJoins:
                    channelJoinInfo:
                      type: Outgoing
                      parent: ${destination.realm.name}
                      parentUrl: ${remote.realm.url}
                      remoteNode: ${destination.channel}
                      filter: ''
                      hopCount: '0'
                      eventID: '0'
                      allowPurge: 'false'
                      archival: 'false'           

provision:
  default:
    runtime: ${nodes}
